2017/8/15
-到目前为止Caculator.class支持一次性二项加减乘除运算，且支持小数点，暂不支持负数
-新增了Debug布朗值数组，利于今后Debug，可用于禁用部分Debug Log
-目前Debug数组并没有实际用途，因程序只能一次性运行所致
-增加了一些用于Debug的表达式
-新增了Caculator_Dev_Log.txt
-Caculator_Dev.Log.txt用于总结当日的开发进度，并且可供开发者阅读以增加乐趣
-目前认为没有其他人，或极少人会阅读Caculator_Dev_Log.txt
-Caculator_Dev_Log.txt会不定期被上传至Github
Notice: 
我居然花了一个下午的时间去写这个数组……
另外，已发现可能的Java自带错误，并且位于谷歌的网页计算器也有此错误，怀疑由Java或JavaScript编成。
已发现的错误：1-0.24000000000000002=0.76，算式中的第一项和第二项均为double型。
计划写电邮至JavaTM和谷歌。
已向JavaTM和谷歌反馈信息。

2017/8/16
-现已支持正常情况下无限次数运算，Debug布朗值数组变得有实际用途了
-新增Static int SymScan(int a, int b)，用于寻找算式中从a到b中的第一个运算符检索位置，且会忽略负号。
-toInt()目前可以转换带小数点的负数
-因为toInt()的性质，toInt()已更改变量名为toDouble()
-num1()已支持负数
-目前num1()和num2()仍有许多bug需要处理
Notice:
8/15发现的错误已认为是精度问题，目前已知的解决方法只有通过更改采用的小数位来避免错误，但此方法并非从根本上解决。
其他方法可以从浏览器的收藏文件夹找到。
我为什么在一开始编写Caculator.class的时候就忘了charAt()？？这一点使得现在造成了很多的麻烦，以后我或许需要改一下，但愿不会
出一堆bug或者异常……
哦我快疯了，两个代码块！

2017/8/17
-改进了num1()和num2()，num1()已采用charAt()语句，num2()仍需优化
Notice:
在SymScan（）发现了错误，已标记错误行。
SymScan()的错误已改正。
将在未来在主方法中加入简化算式的代码，可去除多余的括号。